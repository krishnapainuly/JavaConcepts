Restful API

REST (Representational State Transfer) is an architectural style used for building web-based APIs (Application Programming Interfaces). REST APIs are designed to be simple, scalable, and easy to use. Here are some of the key principles of REST APIs:

1. Client-server architecture: The client-server architecture is a key principle of REST. It separates the concerns of the client and the server, making them independent of each other. This allows for more flexibility and scalability in the application.

2. Stateless: REST APIs are stateless, which means that each request sent to the server should contain all the necessary information to complete the request. The server should not keep any client-specific data between requests. This makes it easier to scale the application horizontally and improves reliability.

3. Uniform interface: REST APIs should have a uniform interface that defines how clients interact with the server. This includes a set of standard HTTP methods (GET, POST, PUT, DELETE) for CRUD (Create, Read, Update, Delete) operations and standard response codes (200 OK, 404 Not Found, etc.) for indicating the status of the request.

4. Resource-based: REST APIs are resource-based, which means that each resource (such as a user, a product, or an order) is identified by a unique URL. Clients can interact with resources using standard HTTP methods and exchange representations of the resources in a variety of formats, such as JSON or XML.

5. Self-descriptive messages: REST APIs should use self-descriptive messages that contain enough information for the client to understand the response without additional information. This includes the use of standard media types, such as JSON or XML, and the use of hypermedia controls, such as links, to navigate between resources.

6. Layered system: REST APIs should be designed as a layered system, where each layer provides a specific functionality, and the communication between layers is defined by a standard interface. This improves scalability and flexibility in the application architecture.

These principles form the foundation of REST APIs and help to ensure that they are scalable, reliable, and easy to use. By following these principles, developers can build APIs that can be easily consumed by clients and can evolve over time without breaking compatibility with existing clients.
----------------------------------------------------------------------------------------------------------------

What is the difference between http & https?

HTTP (Hypertext Transfer Protocol) and HTTPS (Hypertext Transfer Protocol Secure) are two different protocols used for transferring data over the internet.

HTTP is an application-layer protocol used to transfer data from a web server to a web browser. It operates on TCP/IP port 80 by default, and the data transmitted is not encrypted. This means that any data being sent over an HTTP connection can be intercepted and read by anyone who has access to the network.

HTTPS, on the other hand, is a secure version of HTTP. It uses a secure SSL/TLS (Secure Sockets Layer/Transport Layer Security) connection to encrypt data that is transmitted between a web server and a web browser. HTTPS operates on TCP/IP port 443 by default. The use of encryption ensures that data transmitted over an HTTPS connection cannot be easily intercepted or read by unauthorized third parties.

In summary, the main difference between HTTP and HTTPS is that HTTPS provides a layer of security by encrypting data, while HTTP does not.

----------------------------------------------------------------------------------------------------------
+---------+------+------------+
| Method  | Safe | Idempotent |
+---------+------+------------+
| CONNECT | no   | no         |
| DELETE  | no   | yes        |
| GET     | yes  | yes        |
| HEAD    | yes  | yes        |
| OPTIONS | yes  | yes        |
| POST    | no   | no         |
| PUT     | no   | yes        |
| TRACE   | yes  | yes        |
+---------+------+------------+  

GET, TRACE, OPTIONS, HEAD, PUT, DELETE are idempotent, whereas put & delete are not safe.
----------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------